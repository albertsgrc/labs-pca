/* 
 * Command line: opannotate --source pi-opt-4.3g 
 * 
 * Interpretation of command line:
 * Output annotated source file with samples
 * Output all files
 * 
 * CPU: Intel Ivy Bridge microarchitecture, speed 2.7e+06 MHz (estimated)
 * Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (No unit mask) count 100000
 */
/* 
 * Total samples for file : "/home/albert/Dropbox/UPC/FIB/6eQuatri/PCA/Lab/sessio4/pi/pi-opt-4.c"
 * 
 *  49216 97.4053
 */


               :#include <memory.h>
               :#include <stdio.h>
               :#include <stdlib.h>
               :
               :int N, N4;
               :
               :// Only memoizing quotient
               :unsigned memdiv5[10*5][2];
               :unsigned memdiv25[10*25][2];
               :unsigned memdiv239[10*239][2];
               :
               :char a[25480], b[25480], c[25480];
               :char string[100];
               :
               :// The following holds for DIVIDEN
               :/*
               :    1: 0 <= r <= N-1 (el residu d'una divisio qualsevol es un natural menor que el el divisor, en aquest cas N)
               :    2: 0 <= x[k] <= 9 (cada element de x es un digit de PI, de 0 a 9)
               :    3: 0 <= u <= (N-1)*10 + 9 = 10N - 10 + 9 = 10N - 1 usant la formula u = r*10 + x[k] i com a consequaencia logica de 1 i 2)
               :*/
               :
               :
               :void DIVIDE5( char *x )
               :{
               :    uint k;
               :    unsigned r, u;
               :
               :    r = 0;
               :    for( k = 0; k <= N4; k++ )
               :    {
               :        u = r + x[k]; // Dividend
               :        x[k] = memdiv5[u][0]; // Quocient
               :        r = memdiv5[u][1]; // Residu
               :    }
               :}
               :
               :void DIVIDE_a_25_b_239_sq( char *a, char *b )
               :{
               :    uint k;
               :    unsigned ra, ua, rb, ub, rb2, ub2;
               :
               :    ra = rb = rb2 = 0;
  1548  3.0637 :    for( k = 0; k <= N4; k++ )
               :    {
  1080  2.1375 :        ua = ra + a[k];
   780  1.5437 :        a[k] = memdiv25[ua][0];
   735  1.4547 :        ra = memdiv25[ua][1];
               :
   103  0.2039 :        ub = rb + b[k];
   446  0.8827 :        ub2 = memdiv239[ub][0] + rb2;
   816  1.6150 :        b[k] = memdiv239[ub2][0];
  3685  7.2931 :        rb2 = memdiv239[ub2][1];
   734  1.4527 :        rb = memdiv239[ub][1];
               :    }
               :}
               :
               :
               :void DIVIDE239( char *x )
               :{
               :    uint k;
               :    unsigned r, u;
               :
               :    r = 0;
     1  0.0020 :    for( k = 0; k <= N4; k++ )
               :    {
               :        u = r + x[k]; // Dividend
               :        x[k] = memdiv239[u][0]; // Quocient
               :        r = memdiv239[u][1]; // Residu
               :    }
               :}
               :
               :
               :void MULTIPLY( char *x, int n )
               :{
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :    r = 0;
     1  0.0020 :    for( k = N4; k >= 0; k-- )
               :    {
               :        q = n * x[k] + r;
               :        r = q / 10;
               :        x[k] = q - r * 10;
               :    }
               :}
               :
               :void SET( char *x, int n )
               :{
     2  0.0040 :    memset( x, 0, N4 + 1 );
               :    x[0] = n;
               :}
               :
               :
               :void SUBTRACT( char *x, char *y, char *z )
               :{
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :    for( k = N4; k >= 0; k-- )
               :    {
     1  0.0020 :        x[k] = y[k] - z[k];
               :        unsigned char mask = -(x[k] < 0);
     2  0.0040 :        x[k] = x[k] + (10 & mask);
               :        z[k-1] -= mask;
               :    }
               :}
               :
               :void SUBTRACT_2( char * x, char * z, char* x2, char* z2, char * y )
               :{
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
   397  0.7857 :    for( k = N4; k >= 0; k-- )
               :    {
  1792  3.5466 :        x[k] = y[k] - z[k];
   586  1.1598 :        x2[k] = y[k] - z2[k];
  1917  3.7940 :        unsigned char mask = -(x[k] < 0);
  1612  3.1904 :        unsigned char mask2 = -(x2[k] < 0);
  1048  2.0741 :        x[k] += 10 & mask;
  1663  3.2913 :        x2[k] += 10 & mask2;
  1005  1.9890 :        z[k-1] -= mask;
   555  1.0984 :        z2[k-1] -= mask2;
               :    }
               :}
               :
               :void DIVIDE( char *x, int n )
               :{
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :
               :    r = 0;
   730  1.4448 :    for( k = 0; k <= N4; k++ )
               :    {
  1298  2.5689 :        u = r * 10 + x[k];
  1287  2.5472 :        q = u / n;
 25315 50.1019 :        r = u - q * n;
    72  0.1425 :        x[k] = q;
               :    }
               :}
               :
               :
               :void calculate( void );
               :void progress( void );
               :void epilog( void );
               :
               :
               :int main( int argc, char *argv[] )
               :{
               :    N = 10000;
               :
               :    if( argc > 1 )
               :        N = atoi(argv[1]);
               :
               :    setbuf(stdout, NULL);
               :
               :    calculate();
               :
               :    epilog();
               :
               :    return 0;
               :}
               :
               :void calculate( void )
               :{
               :    int j;
               :
               :    N4 = N + 4; /* calculate total:  49218 97.4093 */
               :
               :    for (j = 0; j < 10*5; ++j) {
               :        memdiv5[j][0] = j/5;
               :        memdiv5[j][1] = 10*(j - memdiv5[j][0]*5);
               :    }
               :
               :    for (j = 0; j < 10*25; ++j) {
               :        memdiv25[j][0] = j/25;
               :        memdiv25[j][1] = 10*(j - memdiv25[j][0]*25);
               :    }
               :
               :    for (j = 0; j < 10*239; ++j) {
               :        memdiv239[j][0] = j/239;
               :        memdiv239[j][1] = 10*(j - memdiv239[j][0]*239);
               :    }
               :
               :    SET( a, 0 );
               :    SET( b, 0 );
               :
     5  0.0099 :    for( j = 2 * N4 + 1; j >= 3; j -= 2 )
               :    {
               :        SET( c, 1 );
               :        DIVIDE( c, j );
               :
               :        SUBTRACT_2( a, a, b, b, c );
               :
               :        DIVIDE_a_25_b_239_sq( a, b );
               :
               :        progress();
               :    }
               :
               :    SET( c, 1 );
               :
               :    SUBTRACT( a, c, a );
               :    DIVIDE5( a );
               :
               :    SUBTRACT( b, c, b );
               :    DIVIDE239( b );
               :
               :    MULTIPLY( a, 4 );
               :    SUBTRACT( a, a, b );
               :    MULTIPLY( a, 4 );
               :
               :    progress();
               :}
               :
               :/*
               :
               : N = 10000
               : A = 0
               : B = 0
               : J = 2 * (N + 4) + 1
               : FOR J = J TO 3 STEP -2
               :     A = (1 / J - A) / 5 ^ 2
               :     B = (1 / J - B) / 239 ^ 2
               : NEXT J
               : A = (1 - A) / 5
               : B = (1 - B) / 239
               : PI = (A * 4 - B) * 4
               :
               :*/
               :
               :void progress( void )
               :{
               :    printf(".");
               :}
               :
               :void epilog( void )
               :{
               :    uint j; // OPT: Changed from int to uint, will always be positive
               :
               :    {
               :        fprintf( stdout, " \n3.");
               :        for( j = 1; j <= N; j++ )
               :        {
               :            fprintf( stdout, "%d", a[j]);
               :            if( j % 5  == 0 )
               :                if( j % 50 == 0 )
               :                    if( j % 250  == 0 )
               :                        fprintf( stdout, "    <%d>\n\n   ", j );
               :                    else
               :                        fprintf( stdout, "\n   " );
               :                else
               :                    fprintf( stdout, " " );
               :        }
               :    }
               :}
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/string/../sysdeps/x86_64/memset.S"
 * 
 *    138  0.2731
 */


 /* __memset_chk total:      6  0.0119 */
 /* memset total:    132  0.2612 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/fileops.c"
 * 
 *     67  0.1326
 */


 /* _IO_do_write@@GLIBC_2.2.5 total:     19  0.0376 */
 /* _IO_file_overflow@@GLIBC_2.2.5 total:      9  0.0178 */
 /* _IO_file_write@@GLIBC_2.2.5 total:     29  0.0574 */
 /* _IO_file_xsputn@@GLIBC_2.2.5 total:     10  0.0198 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/stdio-common/vfprintf.c"
 * 
 *     42  0.0831
 */


 /* vfprintf total:     36  0.0712 */
 /* buffered_vfprintf total:      7  0.0139 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/putchar.c"
 * 
 *     39  0.0772
 */


 /* putchar total:     43  0.0851 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/genops.c"
 * 
 *     20  0.0396
 */


 /* __overflow total:      6  0.0119 */
 /* _IO_default_xsputn total:     14  0.0277 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/io/../sysdeps/unix/syscall-template.S"
 * 
 *     19  0.0376
 */


 /* write total:     11  0.0218 */
 /* __write_nocancel total:      8  0.0158 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/string/../sysdeps/x86_64/strchr.S"
 * 
 *      5  0.0099
 */


 /* strchrnul total:      5  0.0099 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/libioP.h"
 * 
 *      4  0.0079
 */


/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/debug/fprintf_chk.c"
 * 
 *      4  0.0079
 */


 /* __fprintf_chk total:      4  0.0079 */
/* 
 * Total samples for file : "/usr/include/x86_64-linux-gnu/bits/string3.h"
 * 
 *      2  0.0040
 */


               :/* Copyright (C) 2004-2014 Free Software Foundation, Inc.
               :   This file is part of the GNU C Library.
               :
               :   The GNU C Library is free software; you can redistribute it and/or
               :   modify it under the terms of the GNU Lesser General Public
               :   License as published by the Free Software Foundation; either
               :   version 2.1 of the License, or (at your option) any later version.
               :
               :   The GNU C Library is distributed in the hope that it will be useful,
               :   but WITHOUT ANY WARRANTY; without even the implied warranty of
               :   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
               :   Lesser General Public License for more details.
               :
               :   You should have received a copy of the GNU Lesser General Public
               :   License along with the GNU C Library; if not, see
               :   <http://www.gnu.org/licenses/>.  */
               :
               :#ifndef _STRING_H
               :# error "Never use <bits/string3.h> directly; include <string.h> instead."
               :#endif
               :
               :__warndecl (__warn_memset_zero_len,
               :	    "memset used with constant zero length parameter; this could be due to transposed parameters");
               :
               :#ifndef __cplusplus
               :/* XXX This is temporarily.  We should not redefine any of the symbols
               :   and instead integrate the error checking into the original
               :   definitions.  */
               :# undef memcpy
               :# undef memmove
               :# undef memset
               :# undef strcat
               :# undef strcpy
               :# undef strncat
               :# undef strncpy
               :# ifdef __USE_GNU
               :#  undef mempcpy
               :#  undef stpcpy
               :# endif
               :# ifdef __USE_BSD
               :#  undef bcopy
               :#  undef bzero
               :# endif
               :#endif
               :
               :
               :__fortify_function void *
               :__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
               :	       size_t __len))
               :{
               :  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :__fortify_function void *
               :__NTH (memmove (void *__dest, const void *__src, size_t __len))
               :{
               :  return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :#ifdef __USE_GNU
               :__fortify_function void *
               :__NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :#endif
               :
               :
               :/* The first two tests here help to catch a somewhat common problem
               :   where the second and third parameter are transposed.  This is
               :   especially problematic if the intended fill value is zero.  In this
               :   case no work is done at all.  We detect these problems by referring
               :   non-existing functions.  */
               :__fortify_function void *
               :__NTH (memset (void *__dest, int __ch, size_t __len))
               :{
               :  if (__builtin_constant_p (__len) && __len == 0
               :      && (!__builtin_constant_p (__ch) || __ch != 0))
               :    {
               :      __warn_memset_zero_len ();
               :      return __dest;
               :    }
     2  0.0040 :  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
               :}
               :
               :#ifdef __USE_BSD
               :__fortify_function void
               :__NTH (bcopy (const void *__src, void *__dest, size_t __len))
               :{
               :  (void) __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :__fortify_function void
               :__NTH (bzero (void *__dest, size_t __len))
               :{
               :  (void) __builtin___memset_chk (__dest, '\0', __len, __bos0 (__dest));
               :}
               :#endif
               :
               :__fortify_function char *
               :__NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
               :}
               :
               :#ifdef __USE_GNU
               :__fortify_function char *
               :__NTH (stpcpy (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___stpcpy_chk (__dest, __src, __bos (__dest));
               :}
               :#endif
               :
               :
               :__fortify_function char *
               :__NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
               :}
               :
               :// XXX We have no corresponding builtin yet.
               :extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
               :			    size_t __destlen) __THROW;
               :extern char *__REDIRECT_NTH (__stpncpy_alias, (char *__dest, const char *__src,
               :					       size_t __n), stpncpy);
               :
               :__fortify_function char *
               :__NTH (stpncpy (char *__dest, const char *__src, size_t __n))
               :{
               :  if (__bos (__dest) != (size_t) -1
               :      && (!__builtin_constant_p (__n) || __n <= __bos (__dest)))
               :    return __stpncpy_chk (__dest, __src, __n, __bos (__dest));
               :  return __stpncpy_alias (__dest, __src, __n);
               :}
               :
               :
               :__fortify_function char *
               :__NTH (strcat (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___strcat_chk (__dest, __src, __bos (__dest));
               :}
               :
               :
               :__fortify_function char *
               :__NTH (strncat (char *__restrict __dest, const char *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));
               :}
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/fputc.c"
 * 
 *      2  0.0040
 */


 /* fputc total:      2  0.0040 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/stdlib/exit.c"
 * 
 *      1  0.0020
 */


 /* exit total:      1  0.0020 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/stdio-common/printf-parse.h"
 * 
 *      1  0.0020
 */


/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/stdio-common/_itoa.c"
 * 
 *      1  0.0020
 */


 /* _itoa_word total:      1  0.0020 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/iofwrite.c"
 * 
 *      1  0.0020
 */


 /* fwrite total:      1  0.0020 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/elf/rtld.c"
 * 
 *      1  0.0020
 */


 /* dl_main total:      1  0.0020 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/elf/../sysdeps/x86_64/dl-machine.h"
 * 
 *      1  0.0020
 */


