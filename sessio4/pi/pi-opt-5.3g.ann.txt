/* 
 * Command line: opannotate --source pi-opt-5.3g 
 * 
 * Interpretation of command line:
 * Output annotated source file with samples
 * Output all files
 * 
 * CPU: Intel Ivy Bridge microarchitecture, speed 2.7e+06 MHz (estimated)
 * Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (No unit mask) count 100000
 */
/* 
 * Total samples for file : "/home/albert/Dropbox/UPC/FIB/6eQuatri/PCA/Lab/sessio4/pi/pi-opt-5.c"
 * 
 *  49653 94.8898
 */


               :#include <memory.h>
               :#include <stdio.h>
               :#include <stdlib.h>
               :
               :int N, N4;
               :
               :// Only memoizing quotient
               :unsigned memdiv5[10*5][2];
               :unsigned memdiv25[10*25][2];
               :unsigned memdiv239[10*239][2];
               :
               :char a[25480], b[25480], c[25480];
               :char string[100];
               :
               :// The following holds for DIVIDEN
               :/*
               :    1: 0 <= r <= N-1 (el residu d'una divisio qualsevol es un natural menor que el el divisor, en aquest cas N)
               :    2: 0 <= x[k] <= 9 (cada element de x es un digit de PI, de 0 a 9)
               :    3: 0 <= u <= (N-1)*10 + 9 = 10N - 10 + 9 = 10N - 1 usant la formula u = r*10 + x[k] i com a consequaencia logica de 1 i 2)
               :*/
               :
               :
               :void DIVIDE5( char *x )
               :{
               :    uint k;
               :    unsigned r, u;
               :
               :    r = 0;
               :    for( k = 0; k <= N4; k++ )
               :    {
               :        u = r + x[k]; // Dividend
     1  0.0019 :        x[k] = memdiv5[u][0]; // Quocient
               :        r = memdiv5[u][1]; // Residu
               :    }
               :}
               :
               :void DIVIDE_a_25_b_239_sq( char *a, char *b )
               :{
               :    uint k;
               :    unsigned ra, ua, rb, ub, rb2, ub2;
               :
               :    ra = rb = rb2 = 0;
  1482  2.8322 :    for( k = 0; k <= N4; k++ )
               :    {
  1112  2.1251 :        ua = ra + a[k];
   723  1.3817 :        a[k] = memdiv25[ua][0];
   740  1.4142 :        ra = memdiv25[ua][1];
               :
    97  0.1854 :        ub = rb + b[k];
   474  0.9058 :        ub2 = memdiv239[ub][0] + rb2;
   858  1.6397 :        b[k] = memdiv239[ub2][0];
  3825  7.3098 :        rb2 = memdiv239[ub2][1];
   766  1.4639 :        rb = memdiv239[ub][1];
               :    }
               :}
               :
               :
               :void DIVIDE239( char *x )
               :{
               :    uint k;
               :    unsigned r, u;
               :
               :    r = 0;
               :    for( k = 0; k <= N4; k++ )
               :    {
               :        u = r + x[k]; // Dividend
               :        x[k] = memdiv239[u][0]; // Quocient
     1  0.0019 :        r = memdiv239[u][1]; // Residu
               :    }
               :}
               :
               :
               :void MULTIPLY( char *x, int n )
               :{
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :    r = 0;
     1  0.0019 :    for( k = N4; k >= 0; k-- )
               :    {
               :        q = n * x[k] + r;
               :        r = q / 10;
               :        x[k] = q - r * 10;
               :    }
               :}
               :
               :void SET( char *x, int n )
               :{
               :    memset( x, 0, N4 + 1 );
               :    x[0] = n;
               :}
               :
               :
               :void SUBTRACT( char *x, char *y, char *z )
               :{
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :    for( k = N4; k >= 0; k-- )
               :    {
     2  0.0038 :        x[k] = y[k] - z[k];
               :        unsigned char mask = -(x[k] < 0);
               :        x[k] = x[k] + (10 & mask);
               :        z[k-1] -= mask;
               :    }
               :}
               :
               :void SUBTRACT_2( char * x, char * z, char* x2, char* z2, char * y )
               :{
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
   396  0.7568 :    for( k = N4; k >= 0; k-- )
               :    {
  1777  3.3960 :        x[k] = y[k] - z[k];
   583  1.1141 :        x2[k] = y[k] - z2[k];
  1905  3.6406 :        unsigned char mask = -(x[k] < 0);
  1727  3.3004 :        unsigned char mask2 = -(x2[k] < 0);
  1140  2.1786 :        x[k] += 10 & mask;
  1624  3.1036 :        x2[k] += 10 & mask2;
  1044  1.9951 :        z[k-1] -= mask;
   486  0.9288 :        z2[k-1] -= mask2;
               :    }
               :}
               :
               :void DIVIDE( char *x, int n )
               :{
               :    int j, k;
               :    unsigned q, r, u;
               :    long v;
               :
               :    r = 0;
   759  1.4505 :    for( k = 0; k <= N4; k++ )
               :    {
  1254  2.3965 :        u = r * 10 + x[k];
  1326  2.5341 :        q = u / n;
 25455 48.6460 :        r = u - q * n;
    71  0.1357 :        x[k] = q;
               :    }
               :}
               :
               :
               :void calculate( void );
               :void progress( void );
               :void epilog( void );
               :
               :
               :int main( int argc, char *argv[] )
               :{
               :    N = 10000;
               :
               :    if( argc > 1 )
               :        N = atoi(argv[1]);
               :
               :    setbuf(stdout, NULL);
               :
               :    calculate();
               :
               :    epilog();
               :
               :    return 0;
               :}
               :
               :void calculate( void )
               :{
               :    int j;
               :
               :    N4 = N + 4; /* calculate total:  49648 94.8803 */
               :
               :    for (j = 0; j < 10*5; ++j) {
               :        memdiv5[j][0] = j/5;
               :        memdiv5[j][1] = 10*(j - memdiv5[j][0]*5);
               :    }
               :
               :    for (j = 0; j < 10*25; ++j) {
               :        memdiv25[j][0] = j/25;
               :        memdiv25[j][1] = 10*(j - memdiv25[j][0]*25);
               :    }
               :
               :    for (j = 0; j < 10*239; ++j) {
               :        memdiv239[j][0] = j/239;
               :        memdiv239[j][1] = 10*(j - memdiv239[j][0]*239);
               :    }
               :
               :    SET( a, 0 );
               :    SET( b, 0 );
               :
    18  0.0344 :    for( j = 2 * N4 + 1; j >= 3; j -= 2 )
               :    {
               :        SET( c, 1 );
               :        DIVIDE( c, j );
               :
               :        SUBTRACT_2( a, a, b, b, c );
               :
               :        DIVIDE_a_25_b_239_sq( a, b );
               :
               :        progress();
               :    }
               :
               :    SET( c, 1 );
               :
               :    SUBTRACT( a, c, a );
               :    DIVIDE5( a );
               :
               :    SUBTRACT( b, c, b );
               :    DIVIDE239( b );
               :
               :    MULTIPLY( a, 4 );
               :    SUBTRACT( a, a, b );
               :    MULTIPLY( a, 4 );
               :
               :    progress();
               :}
               :
               :/*
               :
               : N = 10000
               : A = 0
               : B = 0
               : J = 2 * (N + 4) + 1
               : FOR J = J TO 3 STEP -2
               :     A = (1 / J - A) / 5 ^ 2
               :     B = (1 / J - B) / 239 ^ 2
               : NEXT J
               : A = (1 - A) / 5
               : B = (1 - B) / 239
               : PI = (A * 4 - B) * 4
               :
               :*/
               :
               :inline void progress( void )
               :{
               :    write(1, ".", 1);
               :}
               :
               :void epilog( void )
               :{ /* epilog total:     10  0.0191 */
               :    uint j;
               :
               :    {
               :        write(1, " \n3.", 4);
     1  0.0019 :        for( j = 1; j <= N; j++ )
               :        {
               :            fprintf( stdout, "%d", a[j]);
     5  0.0096 :            if( j % 5  == 0 )
               :                if( j % 50 == 0 )
               :                    if( j % 250  == 0 )
               :                        fprintf( stdout, "    <%d>\n\n   ", j );
               :                    else
               :                        fprintf( stdout, "\n   " );
               :                else
               :                    fprintf( stdout, " " );
               :        }
               :    }
               :}
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/string/../sysdeps/x86_64/memset.S"
 * 
 *    144  0.2752
 */


 /* __memset_chk total:      4  0.0076 */
 /* memset total:    140  0.2675 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/stdio-common/vfprintf.c"
 * 
 *     90  0.1720
 */


 /* vfprintf total:     76  0.1452 */
 /* buffered_vfprintf total:     14  0.0268 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/fileops.c"
 * 
 *     47  0.0898
 */


 /* _IO_do_write@@GLIBC_2.2.5 total:      5  0.0096 */
 /* _IO_file_overflow@@GLIBC_2.2.5 total:      8  0.0153 */
 /* _IO_file_write@@GLIBC_2.2.5 total:     18  0.0344 */
 /* _IO_file_xsputn@@GLIBC_2.2.5 total:     16  0.0306 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/io/../sysdeps/unix/syscall-template.S"
 * 
 *     38  0.0726
 */


 /* write total:     26  0.0497 */
 /* __write_nocancel total:     12  0.0229 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/genops.c"
 * 
 *     13  0.0248
 */


 /* _IO_default_xsputn total:     13  0.0248 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/debug/fprintf_chk.c"
 * 
 *     13  0.0248
 */


 /* __fprintf_chk total:     17  0.0325 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/string/../sysdeps/x86_64/strchr.S"
 * 
 *     11  0.0210
 */


 /* strchrnul total:     11  0.0210 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/stdio-common/_itoa.c"
 * 
 *     10  0.0191
 */


 /* _itoa_word total:     10  0.0191 */
/* 
 * Total samples for file : "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
 * 
 *      4  0.0076
 */


               :/* Checking macros for stdio functions.
               :   Copyright (C) 2004-2014 Free Software Foundation, Inc.
               :   This file is part of the GNU C Library.
               :
               :   The GNU C Library is free software; you can redistribute it and/or
               :   modify it under the terms of the GNU Lesser General Public
               :   License as published by the Free Software Foundation; either
               :   version 2.1 of the License, or (at your option) any later version.
               :
               :   The GNU C Library is distributed in the hope that it will be useful,
               :   but WITHOUT ANY WARRANTY; without even the implied warranty of
               :   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
               :   Lesser General Public License for more details.
               :
               :   You should have received a copy of the GNU Lesser General Public
               :   License along with the GNU C Library; if not, see
               :   <http://www.gnu.org/licenses/>.  */
               :
               :#ifndef _STDIO_H
               :# error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
               :#endif
               :
               :extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
               :			  const char *__restrict __format, ...) __THROW;
               :extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
               :			   const char *__restrict __format,
               :			   _G_va_list __ap) __THROW;
               :
               :#ifdef __va_arg_pack
               :__fortify_function int
               :__NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
               :{
               :  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
               :				  __bos (__s), __fmt, __va_arg_pack ());
               :}
               :#elif !defined __cplusplus
               :# define sprintf(str, ...) \
               :  __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
               :			   __VA_ARGS__)
               :#endif
               :
               :__fortify_function int
               :__NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
               :		 _G_va_list __ap))
               :{
               :  return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
               :				   __bos (__s), __fmt, __ap);
               :}
               :
               :#if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
               :
               :extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
               :			   size_t __slen, const char *__restrict __format,
               :			   ...) __THROW;
               :extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
               :			    size_t __slen, const char *__restrict __format,
               :			    _G_va_list __ap) __THROW;
               :
               :# ifdef __va_arg_pack
               :__fortify_function int
               :__NTH (snprintf (char *__restrict __s, size_t __n,
               :		 const char *__restrict __fmt, ...))
               :{
               :  return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
               :				   __bos (__s), __fmt, __va_arg_pack ());
               :}
               :# elif !defined __cplusplus
               :#  define snprintf(str, len, ...) \
               :  __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
               :			    __VA_ARGS__)
               :# endif
               :
               :__fortify_function int
               :__NTH (vsnprintf (char *__restrict __s, size_t __n,
               :		  const char *__restrict __fmt, _G_va_list __ap))
               :{
               :  return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
               :				    __bos (__s), __fmt, __ap);
               :}
               :
               :#endif
               :
               :#if __USE_FORTIFY_LEVEL > 1
               :
               :extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
               :			  const char *__restrict __format, ...);
               :extern int __printf_chk (int __flag, const char *__restrict __format, ...);
               :extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
               :			   const char *__restrict __format, _G_va_list __ap);
               :extern int __vprintf_chk (int __flag, const char *__restrict __format,
               :			  _G_va_list __ap);
               :
               :# ifdef __va_arg_pack
               :__fortify_function int
               :fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
               :{
     4  0.0076 :  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			__va_arg_pack ());
               :}
               :
               :__fortify_function int
               :printf (const char *__restrict __fmt, ...)
               :{
               :  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
               :}
               :# elif !defined __cplusplus
               :#  define printf(...) \
               :  __printf_chk (__USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#  define fprintf(stream, ...) \
               :  __fprintf_chk (stream, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :# endif
               :
               :__fortify_function int
               :vprintf (const char *__restrict __fmt, _G_va_list __ap)
               :{
               :#ifdef __USE_EXTERN_INLINES
               :  return __vfprintf_chk (stdout, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :#else
               :  return __vprintf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :#endif
               :}
               :
               :__fortify_function int
               :vfprintf (FILE *__restrict __stream,
               :	  const char *__restrict __fmt, _G_va_list __ap)
               :{
               :  return __vfprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :}
               :
               :# ifdef __USE_XOPEN2K8
               :extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
               :			  ...) __attribute__ ((__format__ (__printf__, 3, 4)));
               :extern int __vdprintf_chk (int __fd, int __flag,
               :			   const char *__restrict __fmt, _G_va_list __arg)
               :     __attribute__ ((__format__ (__printf__, 3, 0)));
               :
               :#  ifdef __va_arg_pack
               :__fortify_function int
               :dprintf (int __fd, const char *__restrict __fmt, ...)
               :{
               :  return __dprintf_chk (__fd, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			__va_arg_pack ());
               :}
               :#  elif !defined __cplusplus
               :#   define dprintf(fd, ...) \
               :  __dprintf_chk (fd, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#  endif
               :
               :__fortify_function int
               :vdprintf (int __fd, const char *__restrict __fmt, _G_va_list __ap)
               :{
               :  return __vdprintf_chk (__fd, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :}
               :# endif
               :
               :# ifdef __USE_GNU
               :
               :extern int __asprintf_chk (char **__restrict __ptr, int __flag,
               :			   const char *__restrict __fmt, ...)
               :     __THROW __attribute__ ((__format__ (__printf__, 3, 4))) __wur;
               :extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
               :			    const char *__restrict __fmt, _G_va_list __arg)
               :     __THROW __attribute__ ((__format__ (__printf__, 3, 0))) __wur;
               :extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
               :				 int __flag, const char *__restrict __format,
               :				 ...)
               :     __THROW __attribute__ ((__format__ (__printf__, 3, 4)));
               :extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
               :				  int __flag,
               :				  const char *__restrict __format,
               :				  _G_va_list __args)
               :     __THROW __attribute__ ((__format__ (__printf__, 3, 0)));
               :
               :#  ifdef __va_arg_pack
               :__fortify_function int
               :__NTH (asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...))
               :{
               :  return __asprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			 __va_arg_pack ());
               :}
               :
               :__fortify_function int
               :__NTH (__asprintf (char **__restrict __ptr, const char *__restrict __fmt,
               :		   ...))
               :{
               :  return __asprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			 __va_arg_pack ());
               :}
               :
               :__fortify_function int
               :__NTH (obstack_printf (struct obstack *__restrict __obstack,
               :		       const char *__restrict __fmt, ...))
               :{
               :  return __obstack_printf_chk (__obstack, __USE_FORTIFY_LEVEL - 1, __fmt,
               :			       __va_arg_pack ());
               :}
               :#  elif !defined __cplusplus
               :#   define asprintf(ptr, ...) \
               :  __asprintf_chk (ptr, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#   define __asprintf(ptr, ...) \
               :  __asprintf_chk (ptr, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#   define obstack_printf(obstack, ...) \
               :  __obstack_printf_chk (obstack, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
               :#  endif
               :
               :__fortify_function int
               :__NTH (vasprintf (char **__restrict __ptr, const char *__restrict __fmt,
               :		  _G_va_list __ap))
               :{
               :  return __vasprintf_chk (__ptr, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
               :}
               :
               :__fortify_function int
               :__NTH (obstack_vprintf (struct obstack *__restrict __obstack,
               :			const char *__restrict __fmt, _G_va_list __ap))
               :{
               :  return __obstack_vprintf_chk (__obstack, __USE_FORTIFY_LEVEL - 1, __fmt,
               :				__ap);
               :}
               :
               :# endif
               :
               :#endif
               :
               :#if !defined __USE_ISOC11 \
               :    || (defined __cplusplus && __cplusplus <= 201103L && !defined __USE_GNU)
               :extern char *__gets_chk (char *__str, size_t) __wur;
               :extern char *__REDIRECT (__gets_warn, (char *__str), gets)
               :     __wur __warnattr ("please use fgets or getline instead, gets can't "
               :		       "specify buffer size");
               :
               :__fortify_function __wur char *
               :gets (char *__str)
               :{
               :  if (__bos (__str) != (size_t) -1)
               :    return __gets_chk (__str, __bos (__str));
               :  return __gets_warn (__str);
               :}
               :#endif
               :
               :extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
               :			  FILE *__restrict __stream) __wur;
               :extern char *__REDIRECT (__fgets_alias,
               :			 (char *__restrict __s, int __n,
               :			  FILE *__restrict __stream), fgets) __wur;
               :extern char *__REDIRECT (__fgets_chk_warn,
               :			 (char *__restrict __s, size_t __size, int __n,
               :			  FILE *__restrict __stream), __fgets_chk)
               :     __wur __warnattr ("fgets called with bigger size than length "
               :		       "of destination buffer");
               :
               :__fortify_function __wur char *
               :fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
               :{
               :  if (__bos (__s) != (size_t) -1)
               :    {
               :      if (!__builtin_constant_p (__n) || __n <= 0)
               :	return __fgets_chk (__s, __bos (__s), __n, __stream);
               :
               :      if ((size_t) __n > __bos (__s))
               :	return __fgets_chk_warn (__s, __bos (__s), __n, __stream);
               :    }
               :  return __fgets_alias (__s, __n, __stream);
               :}
               :
               :extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
               :			   size_t __size, size_t __n,
               :			   FILE *__restrict __stream) __wur;
               :extern size_t __REDIRECT (__fread_alias,
               :			  (void *__restrict __ptr, size_t __size,
               :			   size_t __n, FILE *__restrict __stream),
               :			  fread) __wur;
               :extern size_t __REDIRECT (__fread_chk_warn,
               :			  (void *__restrict __ptr, size_t __ptrlen,
               :			   size_t __size, size_t __n,
               :			   FILE *__restrict __stream),
               :			  __fread_chk)
               :     __wur __warnattr ("fread called with bigger size * nmemb than length "
               :		       "of destination buffer");
               :
               :__fortify_function __wur size_t
               :fread (void *__restrict __ptr, size_t __size, size_t __n,
               :       FILE *__restrict __stream)
               :{
               :  if (__bos0 (__ptr) != (size_t) -1)
               :    {
               :      if (!__builtin_constant_p (__size)
               :	  || !__builtin_constant_p (__n)
               :	  || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
               :	return __fread_chk (__ptr, __bos0 (__ptr), __size, __n, __stream);
               :
               :      if (__size * __n > __bos0 (__ptr))
               :	return __fread_chk_warn (__ptr, __bos0 (__ptr), __size, __n, __stream);
               :    }
               :  return __fread_alias (__ptr, __size, __n, __stream);
               :}
               :
               :#ifdef __USE_GNU
               :extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
               :				   int __n, FILE *__restrict __stream) __wur;
               :extern char *__REDIRECT (__fgets_unlocked_alias,
               :			 (char *__restrict __s, int __n,
               :			  FILE *__restrict __stream), fgets_unlocked) __wur;
               :extern char *__REDIRECT (__fgets_unlocked_chk_warn,
               :			 (char *__restrict __s, size_t __size, int __n,
               :			  FILE *__restrict __stream), __fgets_unlocked_chk)
               :     __wur __warnattr ("fgets_unlocked called with bigger size than length "
               :		       "of destination buffer");
               :
               :__fortify_function __wur char *
               :fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
               :{
               :  if (__bos (__s) != (size_t) -1)
               :    {
               :      if (!__builtin_constant_p (__n) || __n <= 0)
               :	return __fgets_unlocked_chk (__s, __bos (__s), __n, __stream);
               :
               :      if ((size_t) __n > __bos (__s))
               :	return __fgets_unlocked_chk_warn (__s, __bos (__s), __n, __stream);
               :    }
               :  return __fgets_unlocked_alias (__s, __n, __stream);
               :}
               :#endif
               :
               :#ifdef __USE_MISC
               :# undef fread_unlocked
               :extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
               :				    size_t __size, size_t __n,
               :				    FILE *__restrict __stream) __wur;
               :extern size_t __REDIRECT (__fread_unlocked_alias,
               :			  (void *__restrict __ptr, size_t __size,
               :			   size_t __n, FILE *__restrict __stream),
               :			  fread_unlocked) __wur;
               :extern size_t __REDIRECT (__fread_unlocked_chk_warn,
               :			  (void *__restrict __ptr, size_t __ptrlen,
               :			   size_t __size, size_t __n,
               :			   FILE *__restrict __stream),
               :			  __fread_unlocked_chk)
               :     __wur __warnattr ("fread_unlocked called with bigger size * nmemb than "
               :		       "length of destination buffer");
               :
               :__fortify_function __wur size_t
               :fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
               :		FILE *__restrict __stream)
               :{
               :  if (__bos0 (__ptr) != (size_t) -1)
               :    {
               :      if (!__builtin_constant_p (__size)
               :	  || !__builtin_constant_p (__n)
               :	  || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
               :	return __fread_unlocked_chk (__ptr, __bos0 (__ptr), __size, __n,
               :				     __stream);
               :
               :      if (__size * __n > __bos0 (__ptr))
               :	return __fread_unlocked_chk_warn (__ptr, __bos0 (__ptr), __size, __n,
               :					  __stream);
               :    }
               :
               :# ifdef __USE_EXTERN_INLINES
               :  if (__builtin_constant_p (__size)
               :      && __builtin_constant_p (__n)
               :      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
               :      && __size * __n <= 8)
               :    {
               :      size_t __cnt = __size * __n;
               :      char *__cptr = (char *) __ptr;
               :      if (__cnt == 0)
               :	return 0;
               :
               :      for (; __cnt > 0; --__cnt)
               :	{
               :	  int __c = _IO_getc_unlocked (__stream);
               :	  if (__c == EOF)
               :	    break;
               :	  *__cptr++ = __c;
               :	}
               :      return (__cptr - (char *) __ptr) / __size;
               :    }
               :# endif
               :  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
               :}
               :#endif
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/debug/../libio/libioP.h"
 * 
 *      4  0.0076
 */


/* 
 * Total samples for file : "/usr/include/x86_64-linux-gnu/bits/string3.h"
 * 
 *      1  0.0019
 */


               :/* Copyright (C) 2004-2014 Free Software Foundation, Inc.
               :   This file is part of the GNU C Library.
               :
               :   The GNU C Library is free software; you can redistribute it and/or
               :   modify it under the terms of the GNU Lesser General Public
               :   License as published by the Free Software Foundation; either
               :   version 2.1 of the License, or (at your option) any later version.
               :
               :   The GNU C Library is distributed in the hope that it will be useful,
               :   but WITHOUT ANY WARRANTY; without even the implied warranty of
               :   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
               :   Lesser General Public License for more details.
               :
               :   You should have received a copy of the GNU Lesser General Public
               :   License along with the GNU C Library; if not, see
               :   <http://www.gnu.org/licenses/>.  */
               :
               :#ifndef _STRING_H
               :# error "Never use <bits/string3.h> directly; include <string.h> instead."
               :#endif
               :
               :__warndecl (__warn_memset_zero_len,
               :	    "memset used with constant zero length parameter; this could be due to transposed parameters");
               :
               :#ifndef __cplusplus
               :/* XXX This is temporarily.  We should not redefine any of the symbols
               :   and instead integrate the error checking into the original
               :   definitions.  */
               :# undef memcpy
               :# undef memmove
               :# undef memset
               :# undef strcat
               :# undef strcpy
               :# undef strncat
               :# undef strncpy
               :# ifdef __USE_GNU
               :#  undef mempcpy
               :#  undef stpcpy
               :# endif
               :# ifdef __USE_BSD
               :#  undef bcopy
               :#  undef bzero
               :# endif
               :#endif
               :
               :
               :__fortify_function void *
               :__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
               :	       size_t __len))
               :{
               :  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :__fortify_function void *
               :__NTH (memmove (void *__dest, const void *__src, size_t __len))
               :{
               :  return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :#ifdef __USE_GNU
               :__fortify_function void *
               :__NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :#endif
               :
               :
               :/* The first two tests here help to catch a somewhat common problem
               :   where the second and third parameter are transposed.  This is
               :   especially problematic if the intended fill value is zero.  In this
               :   case no work is done at all.  We detect these problems by referring
               :   non-existing functions.  */
               :__fortify_function void *
               :__NTH (memset (void *__dest, int __ch, size_t __len))
               :{
               :  if (__builtin_constant_p (__len) && __len == 0
               :      && (!__builtin_constant_p (__ch) || __ch != 0))
               :    {
               :      __warn_memset_zero_len ();
               :      return __dest;
               :    }
     1  0.0019 :  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
               :}
               :
               :#ifdef __USE_BSD
               :__fortify_function void
               :__NTH (bcopy (const void *__src, void *__dest, size_t __len))
               :{
               :  (void) __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
               :}
               :
               :__fortify_function void
               :__NTH (bzero (void *__dest, size_t __len))
               :{
               :  (void) __builtin___memset_chk (__dest, '\0', __len, __bos0 (__dest));
               :}
               :#endif
               :
               :__fortify_function char *
               :__NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
               :}
               :
               :#ifdef __USE_GNU
               :__fortify_function char *
               :__NTH (stpcpy (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___stpcpy_chk (__dest, __src, __bos (__dest));
               :}
               :#endif
               :
               :
               :__fortify_function char *
               :__NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
               :}
               :
               :// XXX We have no corresponding builtin yet.
               :extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
               :			    size_t __destlen) __THROW;
               :extern char *__REDIRECT_NTH (__stpncpy_alias, (char *__dest, const char *__src,
               :					       size_t __n), stpncpy);
               :
               :__fortify_function char *
               :__NTH (stpncpy (char *__dest, const char *__src, size_t __n))
               :{
               :  if (__bos (__dest) != (size_t) -1
               :      && (!__builtin_constant_p (__n) || __n <= __bos (__dest)))
               :    return __stpncpy_chk (__dest, __src, __n, __bos (__dest));
               :  return __stpncpy_alias (__dest, __src, __n);
               :}
               :
               :
               :__fortify_function char *
               :__NTH (strcat (char *__restrict __dest, const char *__restrict __src))
               :{
               :  return __builtin___strcat_chk (__dest, __src, __bos (__dest));
               :}
               :
               :
               :__fortify_function char *
               :__NTH (strncat (char *__restrict __dest, const char *__restrict __src,
               :		size_t __len))
               :{
               :  return __builtin___strncat_chk (__dest, __src, __len, __bos (__dest));
               :}
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/libio/fputc.c"
 * 
 *      1  0.0019
 */


 /* fputc total:      1  0.0019 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/elf/do-rel.h"
 * 
 *      1  0.0019
 */


/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/elf/dl-object.c"
 * 
 *      1  0.0019
 */


 /* _dl_new_object total:      1  0.0019 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/elf/dl-lookup.c"
 * 
 *      1  0.0019
 */


 /* do_lookup_x total:      1  0.0019 */
/* 
 * Total samples for file : "/build/eglibc-3GlaMS/eglibc-2.19/elf/dl-load.c"
 * 
 *      1  0.0019
 */


 /* _dl_map_object_from_fd total:      1  0.0019 */
