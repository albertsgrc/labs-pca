/* 
 * Command line: opannotate --source ./distribution.g3 
 * 
 * Interpretation of command line:
 * Output annotated source file with samples
 * Output all files
 * 
 * CPU: Intel Ivy Bridge microarchitecture, speed 3600 MHz (estimated)
 * Counted LLC_MISSES events (Last level cache demand requests from this core that missed the LLC) with a unit mask of 0x41 (No unit mask) count 6000
 */
/* 
 * Total samples for file : "/home2/users/alumnes/1185377/dades/Q6/PCA/lab/sessio5/lab5_session/distribution/distribution.c"
 * 
 *    121  5.4236
 */


               :#include <stdio.h>
               :#include <stdlib.h>
               :#include <sys/resource.h>
               :#include <unistd.h>
               :#include <sys/times.h>
               :
               :
               :#define MAX_POS (1<<22) 
               :
               :
               :
               :void distribution_sort(unsigned int *S, unsigned int *D, int n, int bits)
               :{ /* distribution_sort total:    119  5.3339 */
               :
               :   unsigned int max_value = (1<<bits)-1;
               :   unsigned int shift = (sizeof(unsigned int)<<3)-bits;
               :   static unsigned int index[MAX_POS]; 
               :   unsigned int i, j, tmp, tmpp;
               :   register int in;
               :
               :
               :   for (i=0;i<max_value;i++) 
               :      index[i] = 0;
               :
               :   /* Histograma de valors pels bits log2(MAX_POS) més baixos */
    42  1.8826 :   for(i = 0;i<n; i++) 
               :   {
    16  0.7172 :     j = (S[i]>>shift);
               :     index[j] = index[j]+1;
               :   }
               :
               :   tmp = index[0];
               :   index[0] = 0;
               :   for (i=0; i<max_value; i++) 
               :   {
               :      tmpp = tmp + index[i];
               :      tmp  = index[i+1];
               :      index[i+1] = tmpp;
               :   }
               :
     5  0.2241 :   for(i = 0; i<n; i++) 
               :   {
    13  0.5827 :      j = ((S[i]>>shift));
    18  0.8068 :      D[index[j]] = S[i];
    25  1.1206 :      index[j] = index[j]+1;
               :   }
               :
               :}
               :
               :#define N 1000000
               :#define BITS 4
               :typedef enum {RANDOM, GOINGUP} Tdistribution;
               :#define SYNTAX_EXECUTION "Usage: exec n dist_bits distribution (1=GOINGUP)\n" 
               :
               :int main(int argc, char *argv[])
               :{ /* main total:      2  0.0896 */
               :
               :  unsigned int *D;
               :  unsigned int *S;
               :  unsigned int n, i;
               :  int bits;
               :  Tdistribution  dist;
               :  int tmp;
               :  struct rusage start;
               :  struct rusage end;
               :
               :
               :  if (argc == 4)
               :  {
               :      n =atoi(argv[1]);
               :      bits = atoi(argv[2]);
               :      tmp = atoi(argv[3]);
               :      if (tmp == 1) dist = GOINGUP;
               :      else dist=RANDOM;
               :  }
               :  else 
               :  {
               :      printf(SYNTAX_EXECUTION);
               :      exit(0);
               :  }
               :
               :  D = (unsigned int *)malloc(sizeof(unsigned int)*n);
               :  S = (unsigned int *)malloc(sizeof(unsigned int)*n);
               :
               :  if (dist==RANDOM)
               :  { 
               :    for (i=0; i<n; i++) 
               :    { 
               :     S[i] = random();
               :    }
               :  }
               :  else
               :  {
               :    for (i=0; i<n; i++) 
               :    { 
     2  0.0896 :     if (i&1)
               :         S[i] = i;
               :     else 
               :         S[i] = n-i;
               :    }
               :  }
               :
               :  getrusage(RUSAGE_SELF,&start);
               :
               :  distribution_sort(S, D, n, bits);
               :
               :  getrusage(RUSAGE_SELF,&end);
               :  float user_seconds = (float) (end.ru_utime.tv_sec-start.ru_utime.tv_sec) + ((float)(end.ru_utime.tv_usec-start.ru_utime.tv_usec))/1000000.0;
               :  float system_seconds = (float) (end.ru_stime.tv_sec-start.ru_stime.tv_sec) + ((float)(end.ru_stime.tv_usec-start.ru_stime.tv_usec))/1000000.0;
               :  fprintf(stdout, "%f %f\n", user_seconds, system_seconds);
               :
               :  return 0;
               :}
               :
               :
